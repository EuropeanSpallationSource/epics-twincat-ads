###############################################################################
# fAmplitude: Three different types:
#             1. ao with readback  (I/O intr)
#             2. ao without readback
#             3  ai I/O intr

record(ao,"$(P)SetFAmplitudeRB"){
  info(asyn:READBACK,"1")
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.fAmplitude?")
  field(PREC, "3")
  field(SCAN,"Passive")
}

record(ao,"$(P)SetFAmplitude"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.fAmplitude=")
  field(PREC, "3")
  field(SCAN,"Passive")
}

record(ai,"$(P)GetFAmplitude"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),0,1)ADSPORT=851/Main.fAmplitude?")
  field(PREC, "3")
  field(SCAN,"I/O Intr")
}

###############################################################################
# fTest: Fast update rate:
# TS_MS=10:      10ms sample rate in PLC)
# T_DLY_MS=500:  500ms max delay for data to be sent from PLC (buffers in max 500ms). This could result in that 50 values (T_DLY_MS/TS_MS) are sent each 500ms (depending on if other communication is filling the PLC AMS buffers or not).
# One with timestamp from PLC and one with EPICS timestamp

record(ai,"$(P)GetFTestPLCTime"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),0,1)TIMEBASE=PLC/T_DLY_MS=500/TS_MS=10/ADSPORT=851/Main.fTest?")
  field(PREC, "3")
  field(SCAN,"I/O Intr")
}

record(ai,"$(P)GetFTestEpicsTime"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),0,1)TIMEBASE=EPICS/T_DLY_MS=500/TS_MS=10/ADSPORT=851/Main.fTest?")
  field(PREC, "3")
  field(SCAN,"I/O Intr")
}

# Make timestamp accessible in CSS
record(stringin, "$(P)GetFTestEpicsTime:T") {
  field(DTYP, "Soft Timestamp")
  field(TSEL, "$(P)GetFTestEpicsTime.TIME CP")
  field(INP, "@%b %d, %Y %H:%M:%S.%09f")
}

record(stringin, "$(P)GetFTestPLCTime:T") {
  field(DTYP, "Soft Timestamp")
  field(TSEL, "$(P)GetFTestPLCTime.TIME CP")  
  field(INP, "@%b %d, %Y %H:%M:%S.%09f")
}

###############################################################################
# bEnableUpdateSine: Three different types:
#             1. ao with readback  (I/O intr)
#             2. ao without readback
#             3  ai I/O intr

record(bo,"$(P)SetBEnableUpdateSineRB"){
  info(asyn:READBACK,"1")
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.bEnableUpdateSine?")
  field(SCAN,"Passive")
  field(ZNAM,"Zero")
  field(ONAM,"One")
}

record(bo,"$(P)SetBEnableUpdateSine"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.bEnableUpdateSine=")
  field(SCAN,"Passive")
  field(ZNAM,"Zero")
  field(ONAM,"One")
}

record(bi,"$(P)GetBEnableUpdateSine"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0,1)ADSPORT=851/Main.bEnableUpdateSine?")
  field(SCAN,"I/O Intr")
  field(ZNAM,"Zero")
  field(ONAM,"One")
}

###############################################################################
# iCycleCounter:  Four different types:
#             1. ao passive
#             2. ao with readback (default sample and max delay time)
#             3. ai I/O intr (default sample and max delay time)
#             4  ai scan 1 second

record(ao,"$(P)SetICycleCounter"){
  field(PINI, "1")
  field(TSE,  -2)
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.iCycleCounter=")
  field(SCAN, "Passive")
}

record(ao,"$(P)SetICycleCounterRB"){
  info(asyn:READBACK,"1")
  field(PINI, "1")
  field(TSE,  -2)
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/Main.iCycleCounter?")
  field(SCAN, "Passive")
}

record(ai,"$(P)GetICycleCounter"){
  field(PINI, "1")
  field(TSE,  -2)
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0,1)ADSPORT=851/Main.iCycleCounter?")
  field(SCAN, "I/O Intr")
}

record(ai,"$(P)GetICycleCounterSCAN"){
  field(PINI, "1")
  field(TSE,  -2)
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0,1)ADSPORT=851/Main.iCycleCounter?")
  field(SCAN, "1 second")
}

###############################################################################
# fTestArray: waveform Input

record(waveform,"$(P)GetFTestArray"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynFloat64ArrayIn")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.fTestArray?")
  field(NELM,100)
  field(SCAN,"I/O Intr")
  field(FTVL,"DOUBLE")
}

###############################################################################
# fTestArray2: waveform Output and Input
#        Three different types:
#             1. waveform with readback  (I/O intr)
#             2. waveform without readback
#             3  waveform I/O intr

record(waveform,"$(P)SetFTestArray2RB"){
  info(asyn:READBACK,"1")
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynFloat64ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.fTestArray2?")
  field(NELM,10)
  field(SCAN,"Passive")
  field(FTVL,"DOUBLE")
}

record(waveform,"$(P)SetFTestArray2"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynFloat64ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.fTestArray2=")
  field(NELM,10)
  field(SCAN,"Passive")
  field(FTVL,"DOUBLE")
}

record(waveform,"$(P)GetFTestArray2"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynFloat64ArrayIn")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.fTestArray2?")
  field(NELM,10)
  field(SCAN,"I/O Intr")
  field(FTVL,"DOUBLE")
}

###############################################################################
# bArray: waveform Output and Input
#        Three different types:
#             1. waveform with readback  (I/O intr)
#             2. waveform without readback
#             3  waveform I/O intr

record(waveform,"$(P)SetBArrayRB"){
  info(asyn:READBACK,"1")
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.bArray?")
  field(NELM,10)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)SetBArray"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.bArray=")
  field(NELM,10)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)GetBArray"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayIn")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.bArray?")
  field(NELM,10)
  field(SCAN,"I/O Intr")
  field(FTVL,"CHAR")
}

###############################################################################
# sTest: waveform Output and Input
#        Three different types:
#             1. waveform with readback  (I/O intr)
#             2. waveform without readback
#             3  waveform I/O intr

record(waveform,"$(P)SetSTestRB"){
  field(PINI, "1")
  field(TSE, -2)
  info(asyn:READBACK,"1")
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.sTest?")
  field(NELM,100)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)SetSTest"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.sTest=")
  field(NELM,100)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)GetSTest"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayIn")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.sTest?")
  field(NELM,100)
  field(SCAN,"I/O Intr")
  field(FTVL,"CHAR")
}

###############################################################################
# Int8Array: waveform Output and Input
#        Three different types:
#             1. waveform with readback  (I/O intr)
#             2. waveform without readback
#             3  waveform I/O intr

record(waveform,"$(P)SetInt8ArrayRB"){
  field(PINI, "1")
  field(TSE, -2)
  info(asyn:READBACK,"1")
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.Int8Array?")
  field(NELM,100)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)SetInt8Array"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayOut")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.Int8Array=")
  field(NELM,100)
  field(SCAN,"Passive")
  field(FTVL,"CHAR")
}

record(waveform,"$(P)GetInt8Array"){
  field(PINI, "1")
  field(TSE, -2)
  field(DTYP,"asynInt8ArrayIn")
  field(INP,"@asyn($(PORT),0,1)ADSPORT=851/Main.Int8Array?")
  field(NELM,100)
  field(SCAN,"I/O Intr")
  field(FTVL,"CHAR")
}

###############################################################################
# Ams port state: Read and write

record(ai,"$(P)GetAmsPort851State"){
  field(PINI, "1")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0,1)ADSPORT=851/.AMSPORTSTATE.?")
  field(SCAN,"I/O Intr")
}

record(ao,"$(P)SetAmsPort851State"){
  info(asyn:READBACK,"1")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0,1)ADSPORT=851/.AMSPORTSTATE.?")
  field(SCAN, "Passive")
}

